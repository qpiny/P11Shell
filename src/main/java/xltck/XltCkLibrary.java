package xltck;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
import org.rejna.pkcs11.Attribute;
import org.rejna.pkcs11.Info;
import org.rejna.pkcs11.MechanismInfo;
import org.rejna.pkcs11.TokenInfo;
import org.rejna.pkcs11.SlotInfo;
/**
 * Wrapper for library <b>xltCk</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("xltCk") 
@Runtime(CPPRuntime.class) 
public class XltCkLibrary {
	static {
		BridJ.register();
	}
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_X9_42_DH = (int)4;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_EC_UNCOMPRESS = (int)16777216;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_RC2 = (int)17;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_AES_MAC = (int)4227;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_RC4 = (int)18;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SESSION_HANDLE_INVALID = (int)179;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_RC5 = (int)25;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_IDEA_KEY_GEN = (int)832;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES_CBC = (int)290;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKH_VENDOR_DEFINED = (int)-2147483648;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_DH = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_NEED_TO_CREATE_THREADS = (int)9;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_TOKEN_INITIALIZED = (int)1024;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SSL3_MASTER_KEY_DERIVE = (int)881;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_EC = (int)3;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_CAST3 = (int)23;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_WRAPPING_KEY_TYPE_INCONSISTENT = (int)277;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_CAST5 = (int)24;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_ECB64 = (int)4097;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_OBJECT_HANDLE_INVALID = (int)130;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DH_PKCS_KEY_PAIR_GEN = (int)32;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_AC_ISSUER = (int)131;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RIPEMD128_RSA_PKCS = (int)7;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_TOKEN_PRESENT = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SO_PIN_FINAL_TRY = (int)2097152;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_AES_CBC_PAD = (int)4229;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_TLS_MASTER_KEY_DERIVE = (int)885;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SESSION_READ_ONLY = (int)181;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CDMF_MAC_GENERAL = (int)324;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_DUAL_CRYPTO_OPERATIONS = (int)512;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_ATTRIBUTE_READ_ONLY = (int)16;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_UNEXTRACTABLE = (int)106;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_ENCRYPT = (int)256;
	/// <i>native declaration : xltCk.h</i>
	public static final int VERSION_MINOR = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST128_KEY_GEN = (int)800;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_IDEA_CBC = (int)834;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_CBC64 = (int)4098;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_MUTEX_BAD = (int)416;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RIPEMD160_HMAC = (int)577;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_TOKEN_NOT_PRESENT = (int)224;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_DOMAIN_PARAMS_INVALID = (int)304;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA512 = (int)624;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA512_HMAC = (int)625;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_PUBLIC_EXPONENT = (int)290;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC4_KEY_GEN = (int)272;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_JUNIPER_KEY_GEN = (int)4192;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_EC_POINT = (int)385;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_TOKEN = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA256_KEY_DERIVATION = (int)915;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD2_HMAC_GENERAL = (int)514;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_NEVER_EXTRACTABLE = (int)356;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA256_RSA_PKCS = (int)67;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_TLS_KEY_AND_MAC_DERIVE = (int)886;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_VALUE_BITS = (int)352;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKC_X_509 = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SSL3_MASTER_KEY_DERIVE_DH = (int)883;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_KEA = (int)5;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_GENERAL_ERROR = (int)5;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_USER_NOT_LOGGED_IN = (int)257;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_GENERIC_SECRET = (int)16;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_IDEA_ECB = (int)833;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_LIBRARY_CANT_CREATE_OS_THREADS = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RSA_X9_31_KEY_PAIR_GEN = (int)10;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKS_RW_USER_FUNCTIONS = (int)3;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC2_MAC = (int)259;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD2_RSA_PKCS = (int)4;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_RESTORE_KEY_NOT_NEEDED = (int)32;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT = (int)242;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_NO_EVENT = (int)8;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_AUTH_PIN_FLAGS = (int)513;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_AES_KEY_GEN = (int)4224;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SO_PIN_LOCKED = (int)4194304;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_ATTRIBUTE_SENSITIVE = (int)17;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_AES_MAC_GENERAL = (int)4228;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKC_VENDOR_DEFINED = (int)-2147483648;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST128_CBC_PAD = (int)805;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST_CBC = (int)770;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_INFORMATION_SENSITIVE = (int)368;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SESSION_READ_WRITE_SO_EXISTS = (int)184;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_EC_NAMEDCURVE = (int)8388608;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_UNWRAPPING_KEY_HANDLE_INVALID = (int)240;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_PRIVATE_WRAP = (int)4105;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DSA_SHA1 = (int)18;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_MD5_CAST5_CBC = (int)932;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_EC_F_2M = (int)2097152;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_REMOVABLE_DEVICE = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_DEVICE_ERROR = (int)48;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CDMF_CBC_PAD = (int)325;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC5_KEY_GEN = (int)816;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_TOKEN_NOT_RECOGNIZED = (int)225;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKO_SECRET_KEY = (int)4;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_KEY_GEN_MECHANISM = (int)358;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_CANT_LOCK = (int)10;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKU_USER = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SESSION_COUNT = (int)177;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_AES_ECB = (int)4225;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_PIN_INVALID = (int)161;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_AES_CBC = (int)4226;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_VERIFY_RECOVER = (int)267;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_SKIPJACK = (int)27;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_BATON_COUNTER = (int)4148;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DH_PKCS_PARAMETER_GEN = (int)8193;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_ARGUMENTS_BAD = (int)7;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_MECHANISM_PARAM_INVALID = (int)113;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SAVED_STATE_INVALID = (int)352;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DSA_KEY_PAIR_GEN = (int)16;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_VENDOR_DEFINED = (int)-2147483648;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_KEA_KEY_PAIR_GEN = (int)4112;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_CAST128 = (int)24;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RIPEMD160_RSA_PKCS = (int)8;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_AES = (int)31;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RSA_PKCS_KEY_PAIR_GEN = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_IDEA_CBC_PAD = (int)837;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_SHA1_RC4_128 = (int)934;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES_ECB = (int)289;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SSL3_SHA1_MAC = (int)897;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC5_ECB = (int)817;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_VENDOR_DEFINED = (int)-2147483648;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD5 = (int)528;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD2 = (int)512;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_BATON_WRAP = (int)4150;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKS_RW_PUBLIC_SESSION = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RIPEMD128 = (int)560;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_CFB64 = (int)4100;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC5_CBC = (int)818;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_BUFFER_TOO_SMALL = (int)336;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_FUNCTION_FAILED = (int)6;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD5_HMAC_GENERAL = (int)530;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_KEY_TYPE = (int)256;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_SHA1_RC2_128_CBC = (int)938;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_ECMQV_DERIVE = (int)4178;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES2_KEY_GEN = (int)304;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST_KEY_GEN = (int)768;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_NOT_NEEDED = (int)100;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC2_KEY_GEN = (int)256;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_MD5_CAST3_CBC = (int)931;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_VERIFY_RECOVER = (int)16384;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_GENERATE = (int)32768;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKU_SO = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_PRIME_1 = (int)292;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_PRIME_2 = (int)293;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_ECDSA_KEY_PAIR_GEN = (int)4160;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_CHANGED = (int)101;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_BASE = (int)306;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_BATON_ECB96 = (int)4146;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_STATE_UNSAVEABLE = (int)384;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_SHA1_RC4_40 = (int)935;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_NEEDED = (int)102;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_X9_42_DH_HYBRID_DERIVE = (int)50;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_USER_PIN_LOCKED = (int)262144;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES3_MAC_GENERAL = (int)309;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SO_PIN_COUNT_LOW = (int)1048576;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_UNWRAP = (int)263;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SERIAL_SESSION = (int)4;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC2_ECB = (int)257;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES_CBC_PAD = (int)293;
	/// <i>native declaration : xltCk.h</i>
	public static final int FALSE = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_TEMPLATE_INCOMPLETE = (int)208;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RSA_X_509 = (int)3;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_ENCRYPT = (int)260;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST5_MAC = (int)803;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SSL3_PRE_MASTER_KEY_GEN = (int)880;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC2_CBC = (int)258;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_RANDOM_NO_RNG = (int)289;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_MD5_CAST128_CBC = (int)932;
	/// <i>native declaration : xltCk.h</i>
	public static final int CK_EFFECTIVELY_INFINITE = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST5_ECB = (int)801;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_SIGN = (int)264;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC2_MAC_GENERAL = (int)260;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SESSION_READ_ONLY_EXISTS = (int)183;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST_MAC_GENERAL = (int)772;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_CANCEL = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_INDIGESTIBLE = (int)103;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_HW_FEATURE_TYPE = (int)768;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SECONDARY_AUTHENTICATION = (int)2048;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_ECDSA = (int)3;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES3_ECB = (int)306;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST128_MAC = (int)803;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC5_MAC = (int)819;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_MODULUS_BITS = (int)289;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SESSION_EXISTS = (int)182;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_ID = (int)258;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST_MAC = (int)771;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_OS_LOCKING_OK = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_WRAPPED_KEY_LEN_RANGE = (int)274;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_WRAP = (int)262;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES_KEY_GEN = (int)288;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKO_DATA = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD5_KEY_DERIVATION = (int)912;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_KEY_GEN = (int)4096;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_HAS_RESET = (int)770;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_CLASS = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_OFB64 = (int)4099;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST_ECB = (int)769;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_DES = (int)19;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RIPEMD160 = (int)576;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_USER_PIN_COUNT_LOW = (int)65536;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_APPLICATION = (int)16;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST128_ECB = (int)801;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_DERIVE = (int)268;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_FUNCTION_NOT_PERMITTED = (int)104;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST128_CBC = (int)802;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_WRAP = (int)4104;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_DONT_BLOCK = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST_CBC_PAD = (int)773;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_SHA1_CAST5_CBC = (int)933;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_WRAPPING_KEY_SIZE_RANGE = (int)276;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_TRUSTED = (int)134;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_RESET_ON_INIT = (int)769;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST3_KEY_GEN = (int)784;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SSL3_MD5_MAC = (int)896;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_KEY_WRAP_SET_OAEP = (int)1025;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_BATON_KEY_GEN = (int)4144;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC2_CBC_PAD = (int)261;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_SHA1_DES3_EDE_CBC = (int)936;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_BATON_CBC128 = (int)4147;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_FUNCTION_NOT_SUPPORTED = (int)84;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_VENDOR_DEFINED = (int)-2147483648;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_TYPE_INCONSISTENT = (int)99;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_FUNCTION_CANCELED = (int)80;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_TLS_MASTER_KEY_DERIVE_DH = (int)887;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES3_MAC = (int)308;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_DES3 = (int)21;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CDMF_KEY_GEN = (int)320;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST5_KEY_GEN = (int)800;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_DES2 = (int)20;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_RW_SESSION = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKC_X_509_ATTR_CERT = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_COEFFICIENT = (int)296;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST3_CBC_PAD = (int)789;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PKCS5_PBKD2 = (int)944;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_VALUE = (int)17;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_ATTR_TYPES = (int)133;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SO_PIN_TO_BE_CHANGED = (int)8388608;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_MODULUS = (int)288;
	/// <i>native declaration : xltCk.h</i>
	public static final int CK_UNAVAILABLE_INFORMATION = (int)(~0);
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_MD2_DES_CBC = (int)928;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST5_CBC_PAD = (int)805;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_OPERATION_ACTIVE = (int)144;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_DERIVE = (int)524288;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKO_DOMAIN_PARAMETERS = (int)6;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_SHA1_RC2_40_CBC = (int)939;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_RNG = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CDMF_ECB = (int)321;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKO_VENDOR_DEFINED = (int)-2147483648;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_CDMF = (int)30;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SIGNATURE_INVALID = (int)192;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CDMF_MAC = (int)323;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CONCATENATE_BASE_AND_KEY = (int)864;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_JUNIPER_SHUFFLE = (int)4196;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_START_DATE = (int)272;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_WRAPPED_KEY_INVALID = (int)272;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_PIN_INCORRECT = (int)160;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_PIN_LEN_RANGE = (int)162;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBA_SHA1_WITH_SHA1_HMAC = (int)960;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_KEA_KEY_DERIVE = (int)4113;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_RANDOM_SEED_NOT_SUPPORTED = (int)288;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA256_HMAC_GENERAL = (int)594;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SESSION_PARALLEL_NOT_SUPPORTED = (int)180;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_HW_SLOT = (int)4;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_DECRYPT = (int)512;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKN_SURRENDER = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_DATA_LEN_RANGE = (int)33;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_GENERIC_SECRET_KEY_GEN = (int)848;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKS_RW_SO_FUNCTIONS = (int)4;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_EC_F_P = (int)1048576;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_SIGN_RECOVER = (int)265;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RIPEMD160_HMAC_GENERAL = (int)578;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA1_KEY_DERIVATION = (int)914;
	/// <i>native declaration : xltCk.h</i>
	public static final int CK_INVALID_HANDLE = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CDMF_CBC = (int)322;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_DEVICE_MEMORY = (int)49;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA_1_HMAC_GENERAL = (int)546;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_NOT_WRAPPABLE = (int)105;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_MD5_CAST_CBC = (int)930;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_PIN_LOCKED = (int)164;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKO_CERTIFICATE = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA_1 = (int)544;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_SHA1_DES2_EDE_CBC = (int)937;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST5_CBC = (int)802;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_HOST_MEMORY = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int VERSION_MAJOR = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_ENCRYPTED_DATA_INVALID = (int)64;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_ECDSA_PARAMS = (int)384;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_X9_42_DH_DERIVE = (int)49;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_EXTRACT_KEY_FROM_KEY = (int)869;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA512_HMAC_GENERAL = (int)626;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_VALUE_LEN = (int)353;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST128_MAC_GENERAL = (int)804;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_X9_42_DH_KEY_PAIR_GEN = (int)48;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA1_RSA_X9_31 = (int)12;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_CFB32 = (int)4101;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC4 = (int)273;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD5_HMAC = (int)529;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_USER_PIN_FINAL_TRY = (int)131072;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_IDEA_MAC_GENERAL = (int)836;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CONCATENATE_DATA_AND_BASE = (int)867;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_HW = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_EC_KEY_PAIR_GEN = (int)4160;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_ENCRYPTED_DATA_LEN_RANGE = (int)65;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_X9_42_DH_PARAMETER_GEN = (int)8194;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_SUBPRIME_BITS = (int)308;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_ECDSA = (int)4161;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SLOT_ID_INVALID = (int)3;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CONCATENATE_BASE_AND_DATA = (int)866;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST3_MAC_GENERAL = (int)788;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_EXPONENT_1 = (int)294;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_SHA1_CAST128_CBC = (int)933;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_EXPONENT_2 = (int)295;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST5_MAC_GENERAL = (int)804;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RIPEMD128_HMAC_GENERAL = (int)562;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_JUNIPER_WRAP = (int)4197;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_MUTEX_NOT_LOCKED = (int)417;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_FASTHASH = (int)4208;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SESSION_CLOSED = (int)176;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_OWNER = (int)132;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_CLOCK_ON_TOKEN = (int)64;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_WRITE_PROTECTED = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_SECONDARY_AUTH = (int)512;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA1_RSA_PKCS = (int)6;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_XOR_BASE_AND_DATA = (int)868;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_SENSITIVE = (int)259;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_CFB8 = (int)4103;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_USER_TYPE_INVALID = (int)259;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_PRIME_BITS = (int)307;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_ECDH1_COFACTOR_DERIVE = (int)4177;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES3_CBC_PAD = (int)310;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RSA_PKCS = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_RSA = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_CFB16 = (int)4102;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_CRYPTOKI_NOT_INITIALIZED = (int)400;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC5_MAC_GENERAL = (int)820;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_FORTEZZA_TIMESTAMP = (int)4128;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_DIGEST = (int)1024;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_OBJECT_ID = (int)18;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD2_KEY_DERIVATION = (int)913;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA384_HMAC_GENERAL = (int)610;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_USER_PIN_INITIALIZED = (int)8;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKO_PUBLIC_KEY = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_WRAP = (int)131072;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RSA_PKCS_OAEP = (int)9;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_ECDH1_DERIVE = (int)4176;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_SUBPRIME = (int)305;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_JUNIPER = (int)29;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_EXTRACTABLE = (int)354;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_LOCAL = (int)355;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_ATTRIBUTE_TYPE_INVALID = (int)18;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_IDEA = (int)26;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_USER_PIN_TO_BE_CHANGED = (int)524288;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_JUNIPER_ECB128 = (int)4193;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_USER_TOO_MANY_TYPES = (int)261;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_WRAPPING_KEY_HANDLE_INVALID = (int)275;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_ATTRIBUTE_VALUE_INVALID = (int)19;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SO_CARD = (int)33554432;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD2_HMAC = (int)513;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_VERIFY = (int)8192;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SIGN_RECOVER = (int)4096;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_VERIFY = (int)266;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA1_RSA_PKCS_PSS = (int)14;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_DATA_INVALID = (int)32;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES3_KEY_GEN = (int)305;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_SERIAL_NUMBER = (int)130;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DSA_PARAMETER_GEN = (int)8192;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_CERTIFICATE_TYPE = (int)128;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES_MAC_GENERAL = (int)292;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_PRIME = (int)304;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DSA = (int)17;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_MECHANISM_INVALID = (int)112;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SKIPJACK_RELAYX = (int)4106;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_JUNIPER_CBC128 = (int)4194;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_OPERATION_NOT_INITIALIZED = (int)145;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_DECRYPT = (int)261;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_TOKEN_WRITE_PROTECTED = (int)226;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RC5_CBC_PAD = (int)821;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SSL3_KEY_AND_MAC_DERIVE = (int)882;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_TLS_PRE_MASTER_KEY_GEN = (int)884;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_LOGIN_REQUIRED = (int)4;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_PRIVATE_EXPONENT = (int)291;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST3_ECB = (int)785;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : xltCk.h</i><br>
	 * *
	 */
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_ALWAYS_SENSITIVE = (int)357;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_EXTENSION = (int)-2147483648;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_PRIVATE = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_UNWRAP = (int)262144;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_LABEL = (int)3;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DH_PKCS_DERIVE = (int)33;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKO_HW_FEATURE = (int)5;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_KEY_WRAP_LYNKS = (int)1024;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RSA_PKCS_PSS = (int)13;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_EC_ECPARAMETERS = (int)4194304;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_USER_ALREADY_LOGGED_IN = (int)256;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_EC_COMPRESS = (int)33554432;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SO_PIN_DERIVED = (int)16777216;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_MODIFIABLE = (int)368;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_DSA = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKS_RO_USER_FUNCTIONS = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_PIN_EXPIRED = (int)163;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_BATON_SHUFFLE = (int)4149;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA256_HMAC = (int)593;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_ISSUER = (int)129;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_ECDSA_SHA1 = (int)4162;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_SIGNATURE_LEN_RANGE = (int)193;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES3_CBC = (int)307;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_CAST = (int)22;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKH_CLOCK = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_VENDOR_DEFINED = (int)-2147483648;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKK_BATON = (int)28;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_SUBJECT = (int)257;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_UNWRAPPING_KEY_SIZE_RANGE = (int)241;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RSA_X9_31 = (int)11;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_USER_ANOTHER_ALREADY_LOGGED_IN = (int)260;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RSA_9796 = (int)2;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA384 = (int)608;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_CRYPTOKI_ALREADY_INITIALIZED = (int)401;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_END_DATE = (int)273;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_X9_42_MQV_DERIVE = (int)51;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST3_CBC = (int)786;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_PROTECTED_AUTHENTICATION_PATH = (int)256;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKO_PRIVATE_KEY = (int)3;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_DEVICE_REMOVED = (int)50;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_RIPEMD128_HMAC = (int)561;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_GENERATE_KEY_PAIR = (int)65536;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_BATON_ECB128 = (int)4145;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_CAST3_MAC = (int)787;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKF_SIGN = (int)2048;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_JUNIPER_COUNTER = (int)4195;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_DES_MAC = (int)291;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_OK = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_PBE_MD5_DES_CBC = (int)929;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA384_HMAC = (int)609;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_HANDLE_INVALID = (int)96;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_EC_PARAMS = (int)384;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_FUNCTION_NOT_PARALLEL = (int)81;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_TEMPLATE_INCONSISTENT = (int)209;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKS_RO_PUBLIC_SESSION = (int)0;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_KEY_SIZE_RANGE = (int)98;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKH_MONOTONIC_COUNTER = (int)1;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKR_USER_PIN_NOT_INITIALIZED = (int)258;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_IDEA_MAC = (int)835;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA256 = (int)592;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_MD5_RSA_PKCS = (int)5;
	/// <i>native declaration : xltCk.h</i>
	public static final int CKM_SHA_1_HMAC = (int)545;
	/**
	 * define<br>
	 * Conversion Error : (!FALSE)<br>
	 * SKIPPED:<br>
	 * <i>native declaration : xltCk.h:0</i><br>
	 * (!FALSE)
	 */
	/// <i>native declaration : xltCk.h</i>
	public static final int CKA_IBM_OPAQUE = (int)XltCkLibrary.CKA_VENDOR_DEFINED + 1;
	/**
	 * CK_NOTIFY is an application callback that processes events<br>
	 * <i>native declaration : xltCk.h</i>
	 */
	public static abstract class CK_NOTIFY2 extends Callback<CK_NOTIFY2 > {
		public abstract int apply(int hSession, int event, Pointer<? > pApplication);
	};
	/**
	 * CK_CREATEMUTEX is an application callback for creating a<br>
	 * mutex object<br>
	 * <i>native declaration : xltCk.h</i>
	 */
	public static abstract class CK_CREATEMUTEX extends Callback<CK_CREATEMUTEX > {
		public abstract int apply(Pointer<Pointer<? > > ppMutex);
	};
	/**
	 * CK_DESTROYMUTEX is an application callback for destroying a<br>
	 * mutex object<br>
	 * <i>native declaration : xltCk.h</i>
	 */
	public static abstract class CK_DESTROYMUTEX extends Callback<CK_DESTROYMUTEX > {
		public abstract int apply(Pointer<? > pMutex);
	};
	/**
	 * CK_LOCKMUTEX is an application callback for locking a mutex<br>
	 * <i>native declaration : xltCk.h</i>
	 */
	public static abstract class CK_LOCKMUTEX extends Callback<CK_LOCKMUTEX > {
		public abstract int apply(Pointer<? > pMutex);
	};
	/**
	 * CK_UNLOCKMUTEX is an application callback for unlocking a<br>
	 * mutex<br>
	 * <i>native declaration : xltCk.h</i>
	 */
	public static abstract class CK_UNLOCKMUTEX extends Callback<CK_UNLOCKMUTEX > {
		public abstract int apply(Pointer<? > pMutex);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Initialize extends Callback<CK_C_Initialize > {
		public abstract int apply(Pointer<? > pReserved);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Finalize extends Callback<CK_C_Finalize > {
		public abstract int apply(Pointer<? > pReserved);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Terminate extends Callback<CK_C_Terminate > {
		public abstract int apply();
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetInfo extends Callback<CK_C_GetInfo > {
		public abstract int apply(Pointer<Info > pInfo);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetFunctionList extends Callback<CK_C_GetFunctionList > {
		public abstract int apply(Pointer<Pointer<CK_FUNCTION_LIST > > ppFunctionList);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetSlotList extends Callback<CK_C_GetSlotList > {
		public abstract int apply(byte tokenPresent, Pointer<Integer > pSlotList, Pointer<Integer > pusCount);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetSlotInfo extends Callback<CK_C_GetSlotInfo > {
		public abstract int apply(int slotID, Pointer<SlotInfo > pInfo);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetTokenInfo extends Callback<CK_C_GetTokenInfo > {
		public abstract int apply(int slotID, Pointer<TokenInfo > pInfo);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetMechanismList extends Callback<CK_C_GetMechanismList > {
		public abstract int apply(int slotID, Pointer<Integer > pMechanismList, Pointer<Integer > pusCount);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetMechanismInfo extends Callback<CK_C_GetMechanismInfo > {
		public abstract int apply(int slotID, int type, Pointer<MechanismInfo > pInfo);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_InitToken extends Callback<CK_C_InitToken > {
		public abstract int apply(int slotID, Pointer<Byte > pPin, int usPinLen, Pointer<Byte > pLabel);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_InitPIN extends Callback<CK_C_InitPIN > {
		public abstract int apply(int hSession, Pointer<Byte > pPin, int usPinLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SetPIN extends Callback<CK_C_SetPIN > {
		public abstract int apply(int hSession, Pointer<Byte > pOldPin, int usOldLen, Pointer<Byte > pNewPin, int usNewLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_OpenSession extends Callback<CK_C_OpenSession > {
		public abstract int apply(int slotID, int flags, Pointer<? > pApplication, Pointer<XltCkLibrary.CK_C_OpenSession_arg1_Notify_callback > arg1, Pointer<Integer > phSession);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_CloseSession extends Callback<CK_C_CloseSession > {
		public abstract int apply(int hSession);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_CloseAllSessions extends Callback<CK_C_CloseAllSessions > {
		public abstract int apply(int slotID);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetSessionInfo extends Callback<CK_C_GetSessionInfo > {
		public abstract int apply(int hSession, Pointer<CK_SESSION_INFO > pInfo);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetOperationState extends Callback<CK_C_GetOperationState > {
		public abstract int apply(int hSession, Pointer<Byte > pOperationState, Pointer<Integer > pulOperationStateLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SetOperationState extends Callback<CK_C_SetOperationState > {
		public abstract int apply(int hSession, Pointer<Byte > pOperationState, int ulOperationStateLen, int hEncryptionKey, int hAuthenticationKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Login extends Callback<CK_C_Login > {
		public abstract int apply(int hSession, int userType, Pointer<Byte > pPin, int usPinLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Logout extends Callback<CK_C_Logout > {
		public abstract int apply(int hSession);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_CreateObject extends Callback<CK_C_CreateObject > {
		public abstract int apply(int hSession, Pointer<Attribute > pTemplate, int usCount, Pointer<Integer > phObject);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_CopyObject extends Callback<CK_C_CopyObject > {
		public abstract int apply(int hSession, int hObject, Pointer<Attribute > pTemplate, int usCount, Pointer<Integer > phNewObject);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DestroyObject extends Callback<CK_C_DestroyObject > {
		public abstract int apply(int hSession, int hObject);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetObjectSize extends Callback<CK_C_GetObjectSize > {
		public abstract int apply(int hSession, int hObject, Pointer<Integer > pusSize);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetAttributeValue extends Callback<CK_C_GetAttributeValue > {
		public abstract int apply(int hSession, int hObject, Pointer<Attribute > pTemplate, int usCount);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SetAttributeValue extends Callback<CK_C_SetAttributeValue > {
		public abstract int apply(int hSession, int hObject, Pointer<Attribute > pTemplate, int usCount);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_FindObjectsInit extends Callback<CK_C_FindObjectsInit > {
		public abstract int apply(int hSession, Pointer<Attribute > pTemplate, int usCount);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_FindObjects extends Callback<CK_C_FindObjects > {
		public abstract int apply(int hSession, Pointer<Integer > phObject, int usMaxObjectCount, Pointer<Integer > pusObjectCount);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_FindObjectsFinal extends Callback<CK_C_FindObjectsFinal > {
		public abstract int apply(int hSession);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_EncryptInit extends Callback<CK_C_EncryptInit > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, int hKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Encrypt extends Callback<CK_C_Encrypt > {
		public abstract int apply(int hSession, Pointer<Byte > pData, int usDataLen, Pointer<Byte > pEncryptedData, Pointer<Integer > pusEncryptedDataLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_EncryptUpdate extends Callback<CK_C_EncryptUpdate > {
		public abstract int apply(int hSession, Pointer<Byte > pPart, int usPartLen, Pointer<Byte > pEncryptedPart, Pointer<Integer > pusEncryptedPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_EncryptFinal extends Callback<CK_C_EncryptFinal > {
		public abstract int apply(int hSession, Pointer<Byte > pLastEncryptedPart, Pointer<Integer > pusLastEncryptedPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DecryptInit extends Callback<CK_C_DecryptInit > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, int hKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Decrypt extends Callback<CK_C_Decrypt > {
		public abstract int apply(int hSession, Pointer<Byte > pEncryptedData, int usEncryptedDataLen, Pointer<Byte > pData, Pointer<Integer > pusDataLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DecryptUpdate extends Callback<CK_C_DecryptUpdate > {
		public abstract int apply(int hSession, Pointer<Byte > pEncryptedPart, int usEncryptedPartLen, Pointer<Byte > pPart, Pointer<Integer > pusPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DecryptFinal extends Callback<CK_C_DecryptFinal > {
		public abstract int apply(int hSession, Pointer<Byte > pLastPart, Pointer<Integer > pusLastPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DigestInit extends Callback<CK_C_DigestInit > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Digest extends Callback<CK_C_Digest > {
		public abstract int apply(int hSession, Pointer<Byte > pData, int usDataLen, Pointer<Byte > pDigest, Pointer<Integer > pusDigestLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DigestUpdate extends Callback<CK_C_DigestUpdate > {
		public abstract int apply(int hSession, Pointer<Byte > pPart, int usPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DigestKey extends Callback<CK_C_DigestKey > {
		public abstract int apply(int hSession, int hKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DigestFinal extends Callback<CK_C_DigestFinal > {
		public abstract int apply(int hSession, Pointer<Byte > pDigest, Pointer<Integer > pusDigestLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SignInit extends Callback<CK_C_SignInit > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, int hKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Sign extends Callback<CK_C_Sign > {
		public abstract int apply(int hSession, Pointer<Byte > pData, int usDataLen, Pointer<Byte > pSignature, Pointer<Integer > pusSignatureLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SignUpdate extends Callback<CK_C_SignUpdate > {
		public abstract int apply(int hSession, Pointer<Byte > pPart, int usPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SignFinal extends Callback<CK_C_SignFinal > {
		public abstract int apply(int hSession, Pointer<Byte > pSignature, Pointer<Integer > pusSignatureLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SignRecoverInit extends Callback<CK_C_SignRecoverInit > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, int hKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SignRecover extends Callback<CK_C_SignRecover > {
		public abstract int apply(int hSession, Pointer<Byte > pData, int usDataLen, Pointer<Byte > pSignature, Pointer<Integer > pusSignatureLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_VerifyInit extends Callback<CK_C_VerifyInit > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, int hKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_Verify extends Callback<CK_C_Verify > {
		public abstract int apply(int hSession, Pointer<Byte > pData, int usDataLen, Pointer<Byte > pSignature, int usSignatureLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_VerifyUpdate extends Callback<CK_C_VerifyUpdate > {
		public abstract int apply(int hSession, Pointer<Byte > pPart, int usPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_VerifyFinal extends Callback<CK_C_VerifyFinal > {
		public abstract int apply(int hSession, Pointer<Byte > pSignature, int usSignatureLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_VerifyRecoverInit extends Callback<CK_C_VerifyRecoverInit > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, int hKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_VerifyRecover extends Callback<CK_C_VerifyRecover > {
		public abstract int apply(int hSession, Pointer<Byte > pSignature, int usSignatureLen, Pointer<Byte > pData, Pointer<Integer > pusDataLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DigestEncryptUpdate extends Callback<CK_C_DigestEncryptUpdate > {
		public abstract int apply(int hSession, Pointer<Byte > pPart, int ulPartLen, Pointer<Byte > pEncryptedPart, Pointer<Integer > pulEncryptedPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DecryptDigestUpdate extends Callback<CK_C_DecryptDigestUpdate > {
		public abstract int apply(int hSession, Pointer<Byte > pEncryptedPart, int ulEncryptedPartLen, Pointer<Byte > pPart, Pointer<Integer > pulPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SignEncryptUpdate extends Callback<CK_C_SignEncryptUpdate > {
		public abstract int apply(int hSession, Pointer<Byte > pPart, int ulPartLen, Pointer<Byte > pEncryptedPart, Pointer<Integer > pulEncryptedPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DecryptVerifyUpdate extends Callback<CK_C_DecryptVerifyUpdate > {
		public abstract int apply(int hSession, Pointer<Byte > pEncryptedPart, int ulEncryptedPartLen, Pointer<Byte > pPart, Pointer<Integer > pulPartLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GenerateKey extends Callback<CK_C_GenerateKey > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, Pointer<Attribute > pTemplate, int usCount, Pointer<Integer > phKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GenerateKeyPair extends Callback<CK_C_GenerateKeyPair > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, Pointer<Attribute > pPublicKeyTemplate, int usPublicKeyAttributeCount, Pointer<Attribute > pPrivateKeyTemplate, int usPrivateKeyAttributeCount, Pointer<Integer > phPrivateKey, Pointer<Integer > phPublicKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_WrapKey extends Callback<CK_C_WrapKey > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, int hWrappingKey, int hKey, Pointer<Byte > pWrappedKey, Pointer<Integer > pusWrappedKeyLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_UnwrapKey extends Callback<CK_C_UnwrapKey > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, int hUnwrappingKey, Pointer<Byte > pWrappedKey, int usWrappedKeyLen, Pointer<Attribute > pTemplate, int usAttributeCount, Pointer<Integer > phKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_DeriveKey extends Callback<CK_C_DeriveKey > {
		public abstract int apply(int hSession, Pointer<CK_MECHANISM > pMechanism, int hBaseKey, Pointer<Attribute > pTemplate, int usAttributeCount, Pointer<Integer > phKey);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_SeedRandom extends Callback<CK_C_SeedRandom > {
		public abstract int apply(int hSession, Pointer<Byte > pSeed, int usSeedLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GenerateRandom extends Callback<CK_C_GenerateRandom > {
		public abstract int apply(int hSession, Pointer<Byte > pRandomData, int usRandomLen);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_GetFunctionStatus extends Callback<CK_C_GetFunctionStatus > {
		public abstract int apply(int hSession);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_CancelFunction extends Callback<CK_C_CancelFunction > {
		public abstract int apply(int hSession);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_Notify extends Callback<CK_Notify > {
		public abstract int apply(int hSession, int event, Pointer<? > pApplication);
	};
	/// <i>native declaration : xltCk.h</i>
	public static abstract class CK_C_WaitForSlotEvent extends Callback<CK_C_WaitForSlotEvent > {
		public abstract int apply(int flags, Pointer<Integer > pSlot, Pointer<? > pReserved);
	};
	/// <i>native declaration : xltCk.h:0</i>
	public static abstract class CK_C_OpenSession_arg1_Notify_callback extends Callback<CK_C_OpenSession_arg1_Notify_callback > {
		public abstract int apply(int hSession, int event, Pointer<? > pApplication);
	};
	public static native int C_CancelFunction(int CK_SESSION_HANDLE1);
	public static native int C_CloseAllSessions(int CK_SLOT_ID1);
	public static native int C_CloseSession(int CK_SESSION_HANDLE1);
	public static native int C_CopyObject(int CK_SESSION_HANDLE1, int CK_OBJECT_HANDLE1, Pointer<Attribute > CK_ATTRIBUTE_PTR1, int CK_ULONG1, Pointer<Integer > CK_OBJECT_HANDLE_PTR1);
	public static native int C_CreateObject(int CK_SESSION_HANDLE1, Pointer<Attribute > CK_ATTRIBUTE_PTR1, int CK_ULONG1, Pointer<Integer > CK_OBJECT_HANDLE_PTR1);
	public static native int C_Decrypt(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_DecryptDigestUpdate(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_DecryptFinal(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_DecryptInit(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, int CK_OBJECT_HANDLE1);
	public static native int C_DecryptUpdate(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_DecryptVerifyUpdate(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_DeriveKey(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, int CK_OBJECT_HANDLE1, Pointer<Attribute > CK_ATTRIBUTE_PTR1, int CK_ULONG1, Pointer<Integer > CK_OBJECT_HANDLE_PTR1);
	public static native int C_DestroyObject(int CK_SESSION_HANDLE1, int CK_OBJECT_HANDLE1);
	public static native int C_Digest(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_DigestEncryptUpdate(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_DigestFinal(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_DigestInit(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1);
	public static native int C_DigestKey(int CK_SESSION_HANDLE1, int CK_OBJECT_HANDLE1);
	public static native int C_DigestUpdate(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1);
	public static native int C_Encrypt(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_EncryptFinal(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_EncryptInit(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, int CK_OBJECT_HANDLE1);
	public static native int C_EncryptUpdate(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_Finalize(Pointer<? > CK_VOID_PTR1);
	public static native int C_FindObjects(int CK_SESSION_HANDLE1, Pointer<Integer > CK_OBJECT_HANDLE_PTR1, int CK_ULONG1, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_FindObjectsFinal(int CK_SESSION_HANDLE1);
	public static native int C_FindObjectsInit(int CK_SESSION_HANDLE1, Pointer<Attribute > CK_ATTRIBUTE_PTR1, int CK_ULONG1);
	public static native int C_GenerateKey(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, Pointer<Attribute > CK_ATTRIBUTE_PTR1, int CK_ULONG1, Pointer<Integer > CK_OBJECT_HANDLE_PTR1);
	public static native int C_GenerateKeyPair(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, Pointer<Attribute > CK_ATTRIBUTE_PTR1, int CK_ULONG1, Pointer<Attribute > CK_ATTRIBUTE_PTR2, int CK_ULONG2, Pointer<Integer > CK_OBJECT_HANDLE_PTR1, Pointer<Integer > CK_OBJECT_HANDLE_PTR2);
	public static native int C_GenerateRandom(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1);
	public static native int C_GetAttributeValue(int CK_SESSION_HANDLE1, int CK_OBJECT_HANDLE1, Pointer<Attribute > CK_ATTRIBUTE_PTR1, int CK_ULONG1);
	public static native int C_GetFunctionList(Pointer<Pointer<CK_FUNCTION_LIST > > CK_FUNCTION_LIST_PTR_PTR1);
	public static native int C_GetFunctionStatus(int CK_SESSION_HANDLE1);
	public static native int C_GetInfo(Pointer<Info > CK_INFO_PTR1);
	public static native int C_GetMechanismInfo(int CK_SLOT_ID1, int CK_MECHANISM_TYPE1, Pointer<MechanismInfo > CK_MECHANISM_INFO_PTR1);
	public static native int C_GetMechanismList(int CK_SLOT_ID1, Pointer<Integer > CK_MECHANISM_TYPE_PTR1, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_GetObjectSize(int CK_SESSION_HANDLE1, int CK_OBJECT_HANDLE1, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_GetOperationState(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_GetSessionInfo(int CK_SESSION_HANDLE1, Pointer<CK_SESSION_INFO > CK_SESSION_INFO_PTR1);
	public static native int C_GetSlotInfo(int slot, Pointer<SlotInfo> CK_SLOT_INFO_PTR1);
	public static native int C_GetSlotList(byte CK_BBOOL1, Pointer<Integer > CK_SLOT_ID_PTR1, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_GetTokenInfo(int CK_SLOT_ID1, Pointer<TokenInfo > CK_TOKEN_INFO_PTR1);
	public static native int C_Initialize(Pointer<? > CK_VOID_PTR1);
	public static native int C_InitPIN(int CK_SESSION_HANDLE1, Pointer<Byte > CK_CHAR_PTR1, int CK_ULONG1);
	public static native int C_InitToken(int CK_SLOT_ID1, Pointer<Byte > CK_CHAR_PTR1, int CK_ULONG1, Pointer<Byte > CK_CHAR_PTR2);
	public static native int C_Login(int CK_SESSION_HANDLE1, int CK_USER_TYPE1, Pointer<Byte > CK_CHAR_PTR1, int CK_ULONG1);
	public static native int C_Logout(int CK_SESSION_HANDLE1);
	public static native int C_OpenSession(int CK_SLOT_ID1, int CK_FLAGS1, Pointer<? > CK_VOID_PTR1, Pointer<XltCkLibrary.CK_NOTIFY2 > CK_NOTIFY1, Pointer<Integer > CK_SESSION_HANDLE_PTR1);
	public static native int C_SeedRandom(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1);
	public static native int C_SetAttributeValue(int CK_SESSION_HANDLE1, int CK_OBJECT_HANDLE1, Pointer<Attribute > CK_ATTRIBUTE_PTR1, int CK_ULONG1);
	public static native int C_SetOperationState(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, int CK_OBJECT_HANDLE1, int CK_OBJECT_HANDLE2);
	public static native int C_SetPIN(int CK_SESSION_HANDLE1, Pointer<Byte > CK_CHAR_PTR1, int CK_ULONG1, Pointer<Byte > CK_CHAR_PTR2, int CK_ULONG2);
	public static native int C_Sign(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_SignEncryptUpdate(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_SignFinal(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_SignInit(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, int CK_OBJECT_HANDLE1);
	public static native int C_SignRecover(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_SignRecoverInit(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, int CK_OBJECT_HANDLE1);
	public static native int C_SignUpdate(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1);
	public static native int C_UnwrapKey(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, int CK_OBJECT_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Attribute > CK_ATTRIBUTE_PTR1, int CK_ULONG2, Pointer<Integer > CK_OBJECT_HANDLE_PTR1);
	public static native int C_Verify(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, int CK_ULONG2);
	public static native int C_VerifyFinal(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1);
	public static native int C_VerifyInit(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, int CK_OBJECT_HANDLE1);
	public static native int C_VerifyRecover(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1, Pointer<Byte > CK_BYTE_PTR2, Pointer<Integer > CK_ULONG_PTR1);
	public static native int C_VerifyRecoverInit(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, int CK_OBJECT_HANDLE1);
	public static native int C_VerifyUpdate(int CK_SESSION_HANDLE1, Pointer<Byte > CK_BYTE_PTR1, int CK_ULONG1);
	public static native int C_WaitForSlotEvent(int CK_FLAGS1, Pointer<Integer > CK_SLOT_ID_PTR1, Pointer<? > CK_VOID_PTR1);
	public static native int C_WrapKey(int CK_SESSION_HANDLE1, Pointer<CK_MECHANISM > CK_MECHANISM_PTR1, int CK_OBJECT_HANDLE1, int CK_OBJECT_HANDLE2, Pointer<Byte > CK_BYTE_PTR1, Pointer<Integer > CK_ULONG_PTR1);
}
